package com.giantant.skeleton.common.util;

import java.util.Calendar;


public class SolarLunar{
	private static final int akk[] = {
			// 1841
			1,2,4,1,1,2,1,2,1,2,2,1,2,2,1,2,1,1,2,1,2,1,2,1,2,2,2,1,2,1,4,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,5,2,1,2,2,1,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,3,2,1,2,1,2,1,2,2,2,1,2,1,1,2,1,1,2,2,1,2,
			// 1851
			2,2,1,2,1,1,2,1,2,1,5,2,2,1,2,2,1,1,2,1,2,1,1,2,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,1,2,1,2,1,1,2,1,2,2,1,2,2,1,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,5,2,1,2,1,2,2,2,1,2,1,1,2,1,1,2,2,1,2,2,2,1,2,1,1,2,1,1,2,1,2,2,2,1,6,1,1,2,1,1,2,1,2,2,
			// 1861
			1,2,2,1,2,1,2,1,2,1,1,2,2,1,2,1,2,2,1,2,2,3,1,2,1,2,2,1,2,1,2,2,1,2,1,2,1,1,2,1,2,1,2,2,1,2,2,1,2,1,1,2,4,1,2,2,1,2,2,1,2,1,1,2,1,1,2,2,1,2,2,2,1,2,1,1,2,1,1,2,1,2,2,2,1,2,2,3,2,1,1,2,1,2,2,1,2,2,2,1,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,5,2,1,
			// 1871
			2,2,1,2,2,1,2,1,2,1,1,2,1,2,1,2,2,1,2,1,2,2,1,2,1,1,2,1,2,4,2,1,2,2,1,2,1,1,2,1,2,1,2,1,2,2,2,1,2,1,1,2,1,1,2,1,2,2,2,1,2,2,1,1,5,1,2,1,2,2,1,2,2,2,1,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,4,2,1,2,1,1,2,1,2,1,2,1,2,2,1,2,2,1,2,1,1,2,
			// 1881
			1,2,1,2,1,2,5,2,2,1,2,1,1,2,1,2,1,2,1,2,2,1,2,2,1,1,2,1,1,2,1,2,2,2,1,2,2,1,1,2,3,2,1,2,2,1,2,2,2,1,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,2,1,5,2,1,1,2,1,2,1,2,2,1,2,2,1,2,1,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,5,2,1,2,2,1,2,1,2,1,2,
			// 1891
			1,2,1,2,1,2,1,2,2,1,2,2,1,1,2,1,1,5,2,2,1,2,2,2,1,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,5,1,2,1,2,1,2,1,2,2,2,1,2,1,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,5,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,1,2,1,2,5,2,2,1,2,
			// 1901
			1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,3,2,1,1,2,2,1,2,2,2,1,2,1,1,2,1,1,2,2,1,2,2,1,2,2,1,1,2,1,2,1,2,1,2,2,4,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,1,2,2,1,2,1,2,2,1,2,1,5,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,2,1,
			// 1911
			2,1,2,1,1,5,1,2,2,1,2,2,2,1,2,1,1,2,1,1,2,2,1,2,2,2,1,2,1,1,2,1,1,2,1,2,2,2,1,2,5,1,2,1,2,1,1,2,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,3,2,1,2,2,1,2,2,1,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,5,2,2,1,2,2,1,2,1,1,2,1,1,2,2,1,2,2,
			// 1921
			2,1,2,1,1,2,1,1,2,1,2,2,2,1,2,2,3,2,1,1,2,1,2,2,1,2,2,1,2,1,2,1,2,1,1,2,2,1,2,1,2,2,1,2,1,2,1,1,2,1,2,5,2,1,2,2,1,2,1,2,1,1,2,1,2,1,2,2,1,2,2,1,2,1,1,2,1,2,1,2,2,1,2,2,1,5,1,2,1,1,2,2,1,2,2,2,1,2,1,1,2,1,1,2,1,2,2,2,1,2,2,1,1,5,1,2,1,2,2,1,
			// 1931
			2,2,2,1,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,1,6,1,2,1,2,1,1,2,1,2,1,2,2,1,2,2,1,2,1,2,1,1,2,1,2,1,2,2,1,2,2,1,2,1,4,1,2,1,2,1,2,2,2,1,2,1,1,2,1,1,2,1,2,2,2,1,2,2,1,1,2,1,4,1,2,2,1,2,2,2,1,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,
			// 1941
			2,2,1,2,2,4,1,1,2,1,2,1,2,1,2,2,1,2,2,1,2,1,1,2,1,2,1,2,1,2,2,1,2,2,1,2,1,1,2,4,1,2,1,2,2,1,2,2,1,1,2,1,1,2,1,2,2,2,1,2,2,1,1,2,1,1,2,1,2,2,1,2,2,5,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,3,2,1,2,1,2,2,1,2,2,1,2,1,1,2,1,2,1,
			// 1951
			2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,4,2,1,2,1,2,1,2,1,2,1,1,2,2,1,2,2,1,2,2,1,1,2,1,1,2,1,2,2,1,2,2,2,1,4,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,5,2,1,2,2,1,2,2,1,2,1,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,1,2,1,2,1,
			// 1961
			2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,1,2,1,2,2,1,2,2,1,2,1,2,3,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,1,2,2,1,2,2,5,2,1,1,2,1,1,2,2,1,2,2,1,2,2,1,1,2,1,2,1,2,1,2,2,1,2,1,5,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,1,2,2,1,2,1,2,2,1,2,
			// 1971
			1,2,1,1,5,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,1,2,2,2,1,2,2,1,5,1,2,1,1,2,2,1,2,2,2,1,2,1,1,2,1,1,2,1,2,2,2,1,2,1,2,1,5,2,1,1,2,2,1,2,2,1,2,1,2,1,2,1,1,2,2,1,2,1,2,2,1,2,1,2,1,2,1,1,2,1,6,1,2,2,1,2,1,2,1,1,2,1,2,1,2,2,1,2,2,
			// 1981
			1,2,1,1,2,1,1,2,2,1,2,2,2,1,2,3,2,1,1,2,2,1,2,2,2,1,2,1,1,2,1,1,2,1,2,2,2,1,2,2,1,1,2,1,1,5,2,2,1,2,2,1,2,1,2,1,1,2,1,2,1,2,2,1,2,2,1,2,1,2,1,1,2,1,2,2,1,5,2,2,1,2,1,2,1,1,2,1,2,1,2,2,1,2,2,1,2,1,1,2,1,2,1,2,2,1,2,2,1,2,1,1,5,1,2,1,2,2,2,2,
			// 1991
			1,2,1,1,2,1,1,2,1,2,2,2,1,2,2,1,1,2,1,1,2,1,2,2,1,2,5,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,1,2,2,1,5,2,1,1,2,1,2,1,2,2,1,2,1,2,2,1,2,1,1,2,1,2,1,2,2,1,2,2,1,2,1,1,2,3,2,2,1,2,2,2,1,2,1,1,2,1,1,2,1,2,2,2,1,2,2,1,1,2,1,1,2,1,2,2,1,
			// 2001
			2,2,2,3,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,1,2,2,1,2,1,1,2,1,2,1,5,2,2,1,2,1,2,2,1,1,2,1,2,1,2,1,2,2,1,2,2,1,2,1,1,2,1,2,1,5,2,2,1,2,2,1,1,2,1,1,2,1,2,2,2,1,2,2,1,1,2,1,1,2,1,2,2,1,2,2,2,1,1,5,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,
			// 2011
			2,1,2,2,1,2,1,1,2,1,2,1,2,1,6,2,1,2,1,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,1,2,1,2,1,1,2,1,2,2,2,1,2,2,1,1,2,1,1,2,1,2,2,1,2,2,2,1,1,2,3,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,1,2,5,2,1,1,2,1,2,1,2,
			// 2021
			1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,5,2,1,2,1,2,2,1,2,1,2,1,2,1,1,2,1,2,2,1,2,2,1,2,1,2,1,1,5,2,1,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,1,2,2,2,1,2,2,1,5,1,2,1,1,2,2,1,2,2,1,2,2,1,1,2,1,1,2,2,1,2,1,2,2,1,2,1,2,1,2,1,
			// 2031
			2,1,5,2,1,2,2,1,2,1,2,1,2,1,1,2,1,2,2,1,2,2,1,2,1,2,1,1,2,1,5,2,2,2,1,2,1,2,1,1,2,1,2,1,2,2,2,1,2,1,2,1,1,2,1,1,2,2,1,2,2,2,1,2,1,4,1,1,2,1,2,2,2,2,1,2,1,1,2,1,1,2,1,2,2,2,1,2,1,2,1,2,1,1,2,1,2,2,1,2,5,2,1,2,1,2,1,1,2,1,2,2,1,2,2,1,2,1,2,1,
			// 2041
			2,1,1,2,1,2,2,1,2,2,1,2, // 41
			1,5,1,2,1,2,1,2,2,2,1,2, // 42
			1,2,1,1,2,1,1,2,2,1,2,2, // 43
			2,1,2,1,1,2,3,2,1,2,2,2, // 44
			2,1,2,1,1,2,1,1,2,1,2,2, // 45
			2,1,2,2,1,1,2,1,1,2,1,2, // 46
			2,1,2,2,4,1,2,1,1,2,1,2, // 47
			1,2,2,1,2,2,1,2,1,2,1,1, // 48
			2,1,2,1,2,2,1,2,2,1,2,1, // 49
			2,1,4,1,2,1,2,2,1,2,2,1 // 50
	};
	private boolean isYoon;
	private int YoonYN;
	private int amd[];

	public SolarLunar() {
		amd = new int[12];
		init();
	}
	
	public int Sol2Lun(int y,int m, int d){
		isYoon = true;
	    int[] dt;					// �ų��� �����ϼ��� ������ �迭 ����
	    int dtlength;
	    int td;						// �������� ����ϱ� ���� ����ϰ��� ���̸� ������ ����
	    int td1;					// 1840������� ����
	    int td2;					// ��������� ����
	    int sy, sm, sd;				// ���ؿ� ��� ���ڰ��� ������ ��, ��, �� �ӽú���
	    int mm = 0;					// �ӽú���
	    int ly, lm, ld	;			// ���� ���� ��, ��, ���� ������ ����
	   
	    int m1 = 0, m2 = 0;
	    
	    
	    td1 = 672069 ;				// 672069 = 1840 * 365 + 1840/4 - 1840/100 + 1840/400 + 23  //1840����� ����
	    sy = y;
	    sm = m;
	    sd = d;
	    
	    siYoon(sy);

	    if (YoonYN == 1)
	        amd[1]=29;
	    else
	        amd[1]=28;
	    
	    // 1841����� �۳������ ����
	    td2 = (sy - 1) * 365 + (int)((sy - 1)/4) - (int)((sy - 1)/100) + (int)((sy - 1)/400);
	    
	    // �������� ������ ����
	    
	    
	    for (int i = 0 ;i<= sm - 2; i ++)
	        td2 = td2 + amd [i];
	    
	    // �����ϱ����� ������ ����
	    td2 = td2 + sd;
	    
	    // ��������ϰ� ���� 1840������� ������ ����
	    td = td2 - td1 + 1;
	    
	    // 1841����� ���³����� ���
	    
	    dtlength = sy - 1841;
	    
	    
	    dt = new int[dtlength+1];
	    
	    for(int i = 0 ; i <= sy - 1841; i ++){
	        dt[i]= 0;
	        for(int j = 0  ; j <=11; j ++){
	            switch (akk[i*12 + j]) {
	                case 1 : mm = 29;
	                    break;
	                case 2 : mm = 30;
	                    break;
	                case 3 : mm = 58;	// 29 + 29
	                    break;
	                case 4 : mm = 59;	// 29 + 30
	                    break;
	                case 5 : mm = 59;	// 30 + 29
	                    break;
	                case 6 : mm = 60;	// 30 + 30
	                    break;
	            }
	            int intdt  = dt[i];
	            
	            dt[i] = intdt + mm;
	        }
	    }
	    
	    // 1840�� ������ �⵵�� ��� - ��������� �ϼ����� ������ ���� 1841������� �ų� �����ϼ��� ������� �⵵�� ���
	    ly = 0;
	    
	    while (td > dt[ly]) {
	        td = td - dt[ly];
	        ly = ly + 1;
	    }
	    
	    
	    lm = 0;
	   
	    while(isYoon)
	    {
	        if (akk[ly*12 + lm] <= 2){
	            mm = (akk[ly*12 + lm]) + 28;
	            if (td > mm){
	                td = td - mm;
	                lm = lm + 1;
	            }else{
	            	isYoon	= false;
	                break;
	            }
	        }else{
	            switch(akk[ly * 12 +lm]){
	                case 3 :
	                    m1 = 29;
	                    m2 = 29;
	                    break;
	                case 4 :
	                    m1 = 29;
	                    m2 = 30;
	                    break;
	                case 5 :
	                    m1 = 30;
	                    m2 = 29;
	                    break;
	                case 6 :
	                    m1 = 30;
	                    m2 = 30;
	                    break;
	            }
	            
	            
	            if (td > m1){
	                td = td - m1;
	                if (td > m2){
	                	td = td - m2;
	                    lm = lm + 1;
	                }else{
	                    //����
	                }
	            }else{
	            	isYoon	= false;
	                break;
	            }
	        }
	    }
	    
	    ly = ly + 1841;
	    lm = lm + 1;
	    ld = td;
	    
	    dt	= null;
	    
	    return ly*10000+lm*100+ld;
	}
	public Calendar Lun2SolCalendar(int y,int m, int d){
		
		int tempSetDate = Lun2Sol(y, m, d);

		int tempYear = tempSetDate / 10000;
		int tempMonth = (tempSetDate % 10000) / 100;
		int tempDay = tempSetDate % 100;
		Calendar cal = (Calendar) CalendarUtil.getInstance().getRightNow().clone();
		cal.set(tempYear, tempMonth-1,tempDay);
		return cal;
	}
	public Calendar Sol2LunCalendar(int y,int m, int d){
		
		int tempSetDate = Sol2Lun(y, m, d);

		int tempYear = tempSetDate / 10000;
		int tempMonth = (tempSetDate % 10000) / 100;
		int tempDay = tempSetDate % 100;
		
		Calendar cal = (Calendar) CalendarUtil.getInstance().getRightNow().clone();
		cal.set(tempYear, tempMonth-1,tempDay);
		
		return cal;
	}
	// ------------------------------------------
	// ������ �ӷ����� ���� �Լ�
	// ------------------------------------------
	public int Lun2Sol(int y,int m,int d){
		int ly,lm,ld; // ���ؿ� ���� ���ڰ��� ������ ��, ��, �� �ӽú���
		int sy,sm,sd; // ���� ��� ��, ��, ���� ������ ����
		int y1,m1,y2,y3; // �ӽú���
		int leap;
		int td;

		ly = y;
		lm = m;
		ld = d;

		y1 = ly - 1841;
		m1 = lm - 1;
		leap = 0;

		if(akk[y1 * 12 + m1] > 2){
			siYoon(ly);
			leap = YoonYN;
		}

		td = 0;
		for(int i = 0;i <= y1 - 1;i++){
			for(int j = 0;j <= 11;j++){
				switch(akk[i * 12 + j]){
					case 1:
						td = td + 29;
						break;
					case 2:
						td = td + 30;
						break;
					case 3:
						td = td + 58;
						break;
					case 4:
						td = td + 59;
						break;
					case 5:
						td = td + 59;
						break;
					case 6:
						td = td + 60;
						break;
				}
			}
		}

		for(int j = 0;j <= m1 - 1;j++){
			switch(akk[y1 * 12 + j]){
				case 1:
					td = td + 29;
					break;
				case 2:
					td = td + 30;
					break;
				case 3:
					td = td + 58;
					break;
				case 4:
					td = td + 59;
					break;
				case 5:
					td = td + 59;
					break;
				case 6:
					td = td + 60;
					break;
			}
		}

		td = td + ld + 22;

		y1 = 1840;
		while(true){
			y1 = y1 + 1;
			siYoon(y1);
			leap = YoonYN;

			if(leap == 1)
				y2 = 366;
			else
				y2 = 365;

			if(td <= y2)
				break;

			td = td - y2;
		}

		sy = y1;
		amd[1] = y2 - 337;
		m1 = 0;
		while(true){
			m1 = m1 + 1;
			if(td <= amd[m1 - 1])
				break;
			td = td - amd[m1 - 1];
		}

		sm = m1;
		sd = td;
		;
		y3 = sy;
		td = y3 * 365 + (y3 / 4) - (y3 / 100) + (y3 / 400);
		for(int i = 0;i <= sm - 1;i++){
			td = td + amd[i];
		}

		td = td + sd;

		return y3 * 10000 + sm * 100 + sd;
	}
	private void init(){
		isYoon = false;
		initMoon();
	}

	private void initMoon(){
		amd[0] = 31;
		amd[1] = 0;
		amd[2] = 31;
		amd[3] = 30;
		amd[4] = 31;
		amd[5] = 30;
		amd[6] = 31;
		amd[7] = 31;
		amd[8] = 30;
		amd[9] = 31;
		amd[10] = 30;
		amd[11] = 31;
	}

	private void siYoon(int year){
		if(year % 4 != 0)
			YoonYN = 0;
		else if(year % 100 != 0)
			YoonYN = 1;
		else if(year % 400 != 0)
			YoonYN = 0;
		else
			YoonYN = 1;
	}

}

